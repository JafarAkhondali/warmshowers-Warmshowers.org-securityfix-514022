<?php
/**
 * @file
 * Role Delay module file.
 */

/**
 * Implementation of hook_help().
 */
function role_delay_help($path, $arg) {
  switch ($path) {
    case 'admin/help#role_delay':
      return t('The role_delay module enables the configuration of one or more user roles that all new users are <strong>automatically granted</strong> after a specified period of time from registration. A role delay of 0 (zero), will automatically assign that role to every user at creation time.<br /><br />A common use case for this functionality is to restrict the default "authenticated user" role to a minimal set of permissions and progressively add more permissions via roles granted after longer membership times. For example, authenticated users might only have the ability to view content while another role, granted after a period of 30 days, is given to the ability to post comments and still another role, given after a period of 6 months, is given the ability to post comments without approval.<br /><br />To enable role delays, navigate to <a href="/admin/user/roles">admin/user/roles</a>, and edit the individual roles. There will be a field to add a specified "Delay". All users created after this delay has been configured, will receive the role at the designated time.<br /><br />Existing scheduled role delays can be managed on the standard core user admin page at <a href="/admin/user/user">admin/user/user</a>.<br /><br /><strong>Note:</strong> In order to prevent the role_delay table from unnecessary bloat, scheduled roles are cleared when a user is blocked.');
      break;
  }
}


/**
 * Implementation of hook_form_FORM-ID_alter().
 */
function role_delay_form_user_admin_role_alter(&$form, $form_state) {
  $form['role_delay'] = array(
    '#title' => t("Delay"),
    '#type' => 'textfield',
    '#size' => 16,
    '#default_value' => variable_get('role_delay_rid_' . $form['rid']['#value'], ''),
    '#description' => t('Enter the time period that should pass between when a new user is registered and this role is granted.  Entering a value will mean that this role is <strong>automatically granted</strong> to all new users after the specified time period (the "delay") has elapsed. Set to 0 (zero) to automatically assign the role at user creation or leave blank for no delay (the role will <em>not</em> be automatically granted to any users).<br/>Example delays: +12 hours, +4 weeks, +1 year (this value may be any future !link compatible format).', array('!link' => l('strtotime', 'http://www.php.net/manual/en/datetime.formats.php')))
  );
  $form['#validate'][] = 'role_delay_user_admin_role_validate';
  $form['#submit'][] = 'role_delay_user_admin_role_submit';
}


/**
 * Implementation of hook_validate().
 */
function role_delay_user_admin_role_validate($form, &$form_state) {
  if (!empty($form_state['values']['role_delay'])) {
    $now = time();
    $duration = check_plain($form_state['values']['role_delay']);
    $timestamp = strtotime($duration, $now);
    if ($timestamp === FALSE || $timestamp < 0) {
      form_set_error('role_delay', t('The Role Delay must be a valid duration. See !link for valid options.', array('!link' => l('strtotime', 'http://www.php.net/manual/en/datetime.formats.php'))));
    }
    elseif ($timestamp != 0 && $timestamp < $now) {
      form_set_error('role_delay', t('Role Delay must be in the <strong>future</strong> or 0 (for immediately).'));
    }
  }
}


/**
 * Implementation of hook_submit().
 */
function role_delay_user_admin_role_submit($form, &$form_state) {
  if ($form_state['values']['op'] == t('Delete role')) {
    role_delay_delete_delay($form_state['values']['rid']);
    variable_del('role_delay_rid_' . $form_state['values']['rid']);
  }
  elseif (empty($form_state['values']['role_delay']) && !empty($form['role_delay']['#default_value'])) {
    role_delay_delete_delay($form_state['values']['rid']);
    variable_del('role_delay_rid_' . $form_state['values']['rid']);
    watchdog('role_delay', 'The %role role will no longer be automatically granted to new users.', array('%role' => $form_state['values']['name']));
    drupal_set_message(t('The %role role will no longer be automatically granted to new users.', array('%role' => $form_state['values']['name'])));
  }
  elseif (!empty($form_state['values']['role_delay'])) {
    variable_set('role_delay_rid_' . $form_state['values']['rid'], $form_state['values']['role_delay']);
    watchdog('role_delay', 'The %role role will be automatically granted to new users after %delay.', array('%role' => $form_state['values']['name'], '%delay' => $form_state['values']['role_delay']));
    drupal_set_message(t('The %role role will be automatically granted to new users after %delay.', array('%role' => $form_state['values']['name'], '%delay' => $form_state['values']['role_delay'])));
  }
}


/**
 * Implementatin of hook_user().
 */
function role_delay_user($op, &$edit, &$user, $category = NULL) {
  switch ($op) {
    case 'insert' :
      if ($delays = role_delay_get_delays()) {
        foreach ($delays as $rid => $delay) {
          if ($delay['time'] == 0) {
            $edit['roles'][$rid] = $delay['name'];
            watchdog('role_delay', 'User !name granted the %role role.', array('!name' => l($user->name, 'user/' . $user->uid), '%role' => $delay['name']));
            drupal_set_message(t('User !name granted the %role role.', array('!name' => l($user->name, 'user/' . $user->uid), '%role' => $delay['name'])));
          }
          else {
            $wait = strtotime($delay['time'], $user->created);
            db_query('INSERT INTO {role_delay} (uid, rid, waitperiod) VALUES (%d, %d, %d)', $user->uid, $rid, $wait);
          }
        }
      }
      break;

    case 'update' :
      if (isset($edit['status']) && $edit['status'] === 0) {
        db_query('DELETE FROM {role_delay} WHERE uid = %d', $user->uid);
        watchdog('role_delay', 'Delayed roles for blocked user !name have been cleared.', array('!name' => l($user->name, 'user/' . $user->uid)));
      }
      break;

    case 'delete' :
      db_query('DELETE FROM {role_delay} WHERE uid = %d', $user->uid);
      watchdog('role_delay', 'Delayed roles for deleted user %name have been cleared.', array('%name' => $user->name));
      break;
  }
}

/**
 * Implementation of hook_cron().
 */
function role_delay_cron() {
  if ($delays = role_delay_get_delays()) {
    foreach ($delays as $rid => $delay) {
      $results = db_query("SELECT u.name, r.* FROM {role_delay} r LEFT JOIN {users} u ON u.uid = r.uid WHERE waitperiod < %d AND r.rid = %d", time(), $rid);
      while ($account = db_fetch_object($results)) {
        db_query('INSERT INTO {users_roles} (uid, rid) VALUES (%d, %d)', $account->uid, $rid);
        db_query('DELETE FROM {role_delay} WHERE uid = %d AND rid = %d', $account->uid, $rid);
        watchdog('role_delay', 'User !name granted the %role role.', array('!name' => l($account->name, 'user/' . $account->uid), '%role' => $delay['name']));
      }
    }
  }
}

/**
 * Delete a default duration for a role.
 * @param $rid
 *   Required. The role_id to delete.
 */
function role_delay_delete_delay($rid) {
  db_query('DELETE FROM {role_delay} WHERE rid = %d', $rid);
}


/**
 * Get all role delays.
 */
function role_delay_get_delays() {
  $delays= array();
  $roles = user_roles(TRUE);
  unset($roles[DRUPAL_AUTHENTICATED_RID]);
  foreach ($roles as $rid => $role) {
    $delay = variable_get('role_delay_rid_' . $rid, '');
    if ($delay != '') {
      $delays[$rid]['name'] = $role;
      $delays[$rid]['time'] = $delay;
    }
  }
  return $delays;
}


/**
 * Implmentation of hook_theme_registry_alter(),
 */
function role_delay_theme_registry_alter(&$theme_registry) {
  $theme_registry['user_admin_new_role']['function'] = 'role_delay_user_admin_new_role';
  $theme_registry['user_admin_account']['function'] = 'role_delay_user_admin_account';
}

/**
 * Theme the new-role form to add delay.
 */
function role_delay_user_admin_new_role($form) {
  $header = array(t('Name'), t('Delay'), array('data' => t('Operations'), 'colspan' => 2));
  foreach (user_roles() as $rid => $name) {
    $edit_permissions = l(t('edit permissions'), 'admin/user/permissions/' . $rid);
    $delay = variable_get('role_delay_rid_' . $rid, '');
    if (!in_array($rid, array(DRUPAL_ANONYMOUS_RID, DRUPAL_AUTHENTICATED_RID))) {
      $rows[] = array($name, check_plain($delay), l(t('edit role'), 'admin/user/roles/edit/' . $rid), $edit_permissions);
    }
    else {
      $rows[] = array($name, '', t('locked'), $edit_permissions);
    }
  }
  $rows[] = array(drupal_render($form['name']), array('data' => drupal_render($form['submit']), 'colspan' => 2));

  $output = drupal_render($form);
  $output .= theme('table', $header, $rows);

  return $output;
}

/**
 * Theme user administration overview to add delay.
 */
function role_delay_user_admin_account($form) {
  $roles = user_roles(TRUE);
  // Overview table:
  $header = array(
    theme('table_select_header_cell'),
    array('data' => t('Username'), 'field' => 'u.name'),
    array('data' => t('Status'), 'field' => 'u.status'),
    t('Roles'),
    t('Delayed Roles'),
    array('data' => t('Member for'), 'field' => 'u.created', 'sort' => 'desc'),
    array('data' => t('Last access'), 'field' => 'u.access'),
    t('Operations')
  );

  $output = drupal_render($form['options']);
  if (isset($form['name']) && is_array($form['name'])) {
    foreach (element_children($form['name']) as $key) {
      $user_roles = array();
      $delayed_roles_result = db_query('SELECT rid, waitperiod FROM {role_delay} WHERE uid = %d', $key);
      while ($delayed_roles = db_fetch_object($delayed_roles_result)) {
        $user_roles[] = $roles[$delayed_roles->rid] . ' <br /> ' . format_date($delayed_roles->waitperiod, 'short');
      }
      asort($user_roles);
      $form['delayed_roles'][$key] = array('#value' => theme('item_list', $user_roles));
      $rows[] = array(
        drupal_render($form['accounts'][$key]),
        drupal_render($form['name'][$key]),
        drupal_render($form['status'][$key]),
        drupal_render($form['roles'][$key]),
        drupal_render($form['delayed_roles'][$key]),
        drupal_render($form['member_for'][$key]),
        drupal_render($form['last_access'][$key]),
        drupal_render($form['operations'][$key]),
      );
    }
  }
  else {
    $rows[] = array(array('data' => t('No users available.'), 'colspan' => '7'));
  }

  $output .= theme('table', $header, $rows);
  if ($form['pager']['#value']) {
    $output .= drupal_render($form['pager']);
  }

  $output .= drupal_render($form);

  return $output;
}


/**
 * Implementation of hook_user_operations().
 */
function role_delay_user_operations() {
  $operations['role_delay'] = array(
    'label' => 'Clear delayed roles',
    'callback' => 'role_delay_clear',
  );
  return $operations;
}


/**
 * Callback function for clearing delayed roles on the user admin page.
 */
function role_delay_clear($uids) {
  foreach ($uids as $uid) {
    db_query('DELETE FROM {role_delay} WHERE uid = %d', $uid);
  }
  drupal_set_message(format_plural(count($uids), 'Cleared delayed roles for 1 user account.', 'Cleared delayed roles for @count user accounts.'));
}
