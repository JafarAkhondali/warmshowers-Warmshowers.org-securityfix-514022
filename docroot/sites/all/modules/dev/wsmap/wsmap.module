<?php
/**
 * @file
 * Provides the Warmshowers map.
 */


/**
 * Implements hook_permission()
 */
function wsmap_permission() {
  return array(
    'access map detail' => array(
      'title' => t('access map detail'),
      'description' => t('TODO Add a description for \'access map detail\''),
    ),
    'access map' => array(
      'title' => t('access map'),
      'description' => t('TODO Add a description for \'access map\''),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function wsmap_menu() {

  $items['map'] = array(
    'title' => 'Map',
    'page callback' => 'wsmap_view',
    'access arguments' => array('access map'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['maponly'] = array(
    'title' => 'Map',
    'page callback' => 'wsmap_view',
    'access arguments' => array('access map'),
    'type' => MENU_CALLBACK,
  );
  $items['wsmap_xml_hosts'] = array(
    'title' => 'wsmap_xml_hosts',
    'page callback' => 'wsmap_xml_hosts',
    'access arguments' => array('access map'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}


/**
 * Display map
 *
 * @param null $uid
 * @param int $zoom
 * @return string
 * @throws \Exception
 */
function wsmap_view($uid = NULL, $zoom = 0) {
  $wsmap_path = drupal_get_path('module', 'wsmap');



  // JSON not supported in IE6/IE7, so we'll add conditional view of it.
  drupal_add_js($wsmap_path . '/js/json2.js');
  drupal_add_js($wsmap_path . '/js/wsmap.js');
  drupal_add_js($wsmap_path . '/js/wsmap_map_behaviors.js');
  drupal_add_js($wsmap_path . '/js/markerclusterer/src/markerclusterer.js');
  drupal_add_css($wsmap_path . '/wsmap.css');
  drupal_add_js('$google_map_location', array('type' => 'external'));

  // Determine starting center location and zoom for the map
  if (!($default_location = locationservices_get_browser_location())) {
    $default_location = locationservices_country_position_from_country('us'); // Have to start them somewhere
  }

  // Provide settings to the js
  $js_settings['wsmap'] = array(
    'mapdata_source' => url('wsmap_xml_hosts', array('absolute' => TRUE)),
    'base_path' => base_path() . $wsmap_path,
    'defaultLocation' => array(
      'latitude' => $default_location->latitude,
      'longitude' => $default_location->longitude,
      'zoom' => $default_location->defaultzoom,
    ),
    'loggedin' => user_access('access map detail'),
    'mapwidth' => 100,
    'maxresults' => variable_get('wsmap_max_hosts_retrievable', 2000),
    'marker_base_opacity' => floatval(variable_get('wsmap_marker_base_opacity', .5)),
    'marker_combined_opacity' => floatval(variable_get('wsmap_marker_combined_opacity', .7)),
    'marker_dimming_factor' => floatval(variable_get('wsmap_marker_dimming_factor', .5)),
    'clusterer' => array(
      'maxZoom' => intval(variable_get('wsmap_clusterer_max_zoom', 6)),
      'gridSize' => intval(variable_get('wsmap_clusterer_grid_size', 50)),
    ),
  );

  if (!empty($uid)) {
    $account = user_load($uid);
    $default_location->latitude = $account->latitude;
    $default_location->longitude = $account->longitude;
    $default_location->zoom = $zoom;

    $js_settings['wsmap']['userInfo'] = array(
      'uid' => $account->uid,
      'latitude' => $account->latitude,
      'longitude' => $account->longitude,
      'zoom' => $account->zoom,
    );

  }


  drupal_add_js($js_settings, array('type' => 'setting', 'scope' => JS_DEFAULT));

  return theme('wsmap_view');
}



/**
 * Get accounts within a geographic region.
 * Can also just return the count of members in that region.
 *
 * Max # of hosts retrievable (limit) is controlled by the Drupal variable
 * wsmap_max_hosts_retrievable
 *
 * @param float $minlat
 * @param float $maxlat
 * @param float $minlon
 * @param float $maxlon
 * @param float $centerlat
 * @param float $centerlon
 * @param int $maxresults
 *
 * @return array
 *   Returns array containing hosts found in the range.
 */
function wsmap_get_hosts_by_location($minlat, $maxlat, $minlon, $maxlon, $centerlat, $centerlon, $limit = 2000) {

  $latlonwhere = "latitude > :minlat AND latitude < :maxlat AND longitude > :minlon AND longitude < :maxlon ";
  if ($minlon > $maxlon) { // The case on the 180 degrees longitude (New Zealand)
    $latlonwhere = "latitude > :minlat AND latitude < :maxlat AND (longitude < :minlon OR longitude > :maxlon)";
  }

  $totalsql = "SELECT COUNT(*) count FROM {user_location} l, {wsuser} w, {users} u
    WHERE $latlonwhere
    AND u.uid = l.oid AND u.uid = w.uid AND u.status > 0
    AND !notcurrentlyavailable
    AND u.uid NOT IN (SELECT ur.uid FROM users_roles ur WHERE ur.rid = 9)
    ";
  $avail_results_count = db_query($totalsql, array(':minlat' => $minlat, ':maxlat' => $maxlat, ':minlon' => $minlon, ':maxlon' => $maxlon))->fetchField();


  // The subquery on users_roles prevents unvalidated users from showing up.
//  $sql = "SELECT u.uid, u.created, u.access, u.login, w.fullname name, street, city, province, postal_code, country, latitude, longitude,
//    source, picture, notcurrentlyavailable,
//    DEGREES(ACOS(SIN(RADIANS(:centerlat)) * SIN(RADIANS(latitude))+COS(RADIANS(:centerlat)) * COS(RADIANS(latitude)) * COS(RADIANS(:centerlon - longitude)))) * 60 AS distance,
//    CONCAT(latitude, ',', longitude) AS position
//    FROM {users} u, {user_location} l, {wsuser} w
//    WHERE $latlonwhere
//    AND u.uid = l.oid AND u.uid=w.uid AND u.status>0 AND !w.isunreachable AND !w.isstale
//    AND !notcurrentlyavailable
//    AND u.uid NOT IN (SELECT ur.uid FROM users_roles ur WHERE ur.rid = 9)
//		ORDER BY distance ASC";

  $sql = "SELECT u.uid, u.created, u.access, u.login, w.fullname name, street, city, province, postal_code, country, latitude, longitude,
    source, picture, notcurrentlyavailable,
    DEGREES(ACOS(SIN(RADIANS(:centerlat)) * SIN(RADIANS(latitude))+COS(RADIANS(:centerlat)) * COS(RADIANS(latitude)) * COS(RADIANS(:centerlon - longitude)))) * 60 AS distance,
    CONCAT(latitude, ',', longitude) AS position
    FROM {users} u, {user_location} l, {wsuser} w
    WHERE $latlonwhere
    AND u.uid = l.oid AND u.uid = w.uid AND u.status > 0
    AND !notcurrentlyavailable
    AND u.uid NOT IN (SELECT ur.uid FROM users_roles ur WHERE ur.rid = 9)
		ORDER BY distance ASC";

  $limit = min($limit, variable_get('wsmap_max_hosts_retrievable', 2000));
  $result = db_query_range($sql, 0, $limit, array(':centerlat' => $centerlat,';centerlong' => $centerlon, ':minlat' => $minlat));

  $accounts = array();
  while ($row = db_fetch_array($result)) {
    $accounts[] = $row;
  }

  return array(
    'status' => array(
      'delivered' => count($accounts),
      'totalresults' => $avail_results_count,
      'status' => 'complete',
    ),
    'query_data' => array(
      'sql' => $sql,
      'centerlat' => $centerlat,
      'centerlon' => $centerlon,
      'minlat' => $minlat,
      'maxlat' => $maxlat,
      'minlon' => $minlon,
      'maxlon' => $maxlon,
      'limit' => $limit,
    ),
    'accounts' => $accounts,
  );
}



/*
 * Implementation of hook_block()
 */
/**
 * Implements hook_block_info().
 */
function wsmap_block_info() {
  if (TRUE) {
    $blocks = array(
      'wsmap_map' => array(
        'info' => t('Warmshowers Google Map'),
        'weight' => 0,
        'status' => 1,
      ),
      'wsmap_map_behaviors' => array(
        'info' => t('Warmshowers Google Map Behaviors Block'),
        'weight' => 0,
        'status' => 1,
      ),
    );
  }
}

/**
 * Implements hook_block_view().
 */
function wsmap_block_view($delta) {
  if (TRUE) {
    switch ($delta) {
      case 'wsmap_map':
        $blocks = array(
          'subject' => '',
          'content' => wsmap_view(),
        );
        break;
      case 'wsmap_map_behaviors':
        // TODO Please change this theme call to use an associative array for the $variables parameter.
        $blocks = array(
          'subject' => '',
          'content' => theme('wsmap_map_behaviors_block'),
        );
        break;
    }
  }
}


/*
 * Implements hook_theme()
 */

function wsmap_theme() {
  $template_path = drupal_get_path('module', 'wsmap') . '/templates';
  return array(
    'wsmap_map_behaviors_block' => array(
      'variables' => array('menu' => NULL),
      'path' => $template_path,
      'template' => 'wsmap-map-behaviors-block',
    ),
    'wsmap_view' => array(
      'path' => $template_path,
      'template' => 'wsmap-view',
    ),
  );
}

/*
 * Preprocessing function for wsmap-map-behaviors-block.tpl.php
 */
function template_preprocess_wsmap_map_behaviors_block(&$vars) {
  // Provide KML file as js setting to toggle on and off
  $kml_file = variable_get("user_location_adv_cycling_kmz", "https://www.warmshowers.org/files/kml/AdvCyclingManyRoutesUnsimplified.kmz");
  drupal_add_js(array('wsmap' => array('advCycKML' => $kml_file)), array('type' => 'setting', 'scope' => JS_DEFAULT));
}
