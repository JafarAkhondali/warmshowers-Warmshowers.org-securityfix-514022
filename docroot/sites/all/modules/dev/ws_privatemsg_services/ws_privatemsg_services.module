<?php

/**
 * @file
 * Service for sending contact requests.
 */

/**
 * Implements hook_services_resources() to describe resources provided here
 */
function ws_privatemsg_services_services_resources_alter(&$resources, $endpoint) {
  // Provide workarounds to avoid changing the API that was used in D6


  $resources['privatemsg']['actions']['get'] = array(
    'callback' => 'ws_privatemsg_services_get',
    'access arguments' => array('get private messages from remote'),
    'args' => array(
      array(
        'name' => 'type',
        'type' => 'string',
        'optional' => TRUE,
        'source' => 'data',
        'description' => t('The type of messages to retrieve. Can be inbox or sent.'),
      ),

      array(
        'name' => 'offset',
        'type' => 'int',
        'optional' => TRUE,
        'description' => t('An offset integer for paging.')
      ),
      array(
        'name' => 'limit',
        'type' => 'int',
        'optional' => TRUE,
        'description' => t('A limit integer for paging.')
      ),
    ),
  );

  //privatemsg.unreadCount
  $resources['privatemsg']['actions']['unreadCount'] = array(
    'callback' => '_privatemsg_services_unread_count',
    'access arguments' => array('get private messages from remote'),
//    'file' => array('file' => 'inc', 'module' => 'ws_privatemsg_service'),
    'args' => array(
      array(
        'name' => 'uid',
        'type' => 'int',
        'source' => 'data',
        'optional' => TRUE,
        'description' => t('Instead of receiving the count of unread messages from the authenticated user, receive the count of unread messages from another user. The currently authenticated user needs to have the "read all private messages" permission to x messages from another user.')
      ),
    ),
    'return' => 'int',
    'help' => t('Get a users private messages unread count.')
  );

  // privatemsg.send
  $resources['privatemsg']['actions']['send'] = array(
    'callback' => '_privatemsg_services_send',
    'access arguments' => array('send private messages from remote'),
    'file' => array('file' => 'inc', 'module' => 'ws_privatemsg_service'),
    'args' => array(
      array(
        'name' => 'recipients',
        'type' => 'string',
        'source' => 'data',
        'description' => t('A comma separated list of recipients usernames.'),
      ),
      array(
        'name' => 'subject',
        'type' => 'string',
        'source' => 'data',
        'description' => t('A message subject.'),
      ),
      array(
        'name' => 'body',
        'type' => 'string',
        'source' => 'data',
        'optional' => TRUE,
        'description' => t('A message body.'),
      ),
      array(
        'name' => 'thread_id',
        'type' => 'int',
        'source' => 'data',
        'optional' => TRUE,
        'description' => t('Thread ID - can be 0 to create new thread'),
      )
    ),
    'return' => 'bool',
    'help' => t('Returns TRUE if the message sending was a success.')
  );
  // privatemsg.reply
  $resources['privatemsg']['actions']['reply'] = array(
    'callback' => '_privatemsg_services_send',
    'access arguments' => array('send private messages from remote'),
    'file' => array('file' => 'inc', 'module' => 'ws_privatemsg_service'),
    'args' => array(
      array(
        'name' => 'body',
        'type' => 'string',
        'source' => 'data',
        'description' => t('A message body.'),
      ),
      array(
        'name' => 'thread_id',
        'type' => 'int',
        'source' => 'data',
        'description' => t('A thread ID for an existing message.'),
      ),
    ),
    'return' => 'bool',
    'help' => t('Returns TRUE if the message reply was a success.')
  );
  // privatemsg.getThread
  $resources['privatemsg']['actions']['getThread'] = array(
    'callback' => '_privatemsg_services_get_thread',
    'access arguments' => array('get private messages from remote'),
    'args' => array(
      array(
        'name' => 'thread_id',
        'type' => 'int',
        'source' => array('data' => 'thread_id'),
        'description' => t('The ID of the thread that should be retrieved.')
      ),
      array(
        'name' => 'offset',
        'type' => 'int',
        'source' => array('data' => 'offset'),
        'optional' => TRUE,
        'description' => t('Message offset from the start of the thread.')
      ),
    ),
    'return' => 'array',
    'help' => t('Get all messages in a thread. User needs to be logged in. Unless the logged-in user has the \'read all private messages\' permission, the user will only be able to get threads that he/she participated in.')
  );

  // privatemsg.markThreadRead. status of 0 == PRIVATEMSG_READ, 1==PRIVATEMSG_UNREAD
  $resources['privatemsg']['actions']['markThreadRead'] = array(
    'callback' => 'ws_privatemsg_service_change_thread_status',
    'access arguments' => array('get private messages from remote'),
    'file' => array('file' => 'inc', 'module' => 'ws_privatemsg_services'),
    'args' => array(
      array(
        'name' => 'thread_id',
        'type' => 'int',
        'source' => array('data' => 'thread_id'),
        'description' => t('The ID of the thread that should be marked.')
      ),
      array(
        'name' => 'status',
        'type' => 'int',
        'source' => array('data' => 'status'),
        'optional' => TRUE,
        'default value' => PRIVATEMSG_READ,
        'description' => t('Status to apply to thread, PRIVATEMSG_READ or PRIVATEMSG_UNREAD'),
      ),
    ),
    'return' => 'bool',
    'help' => t('Change status of thread, by default to PRIVATEMSG_READ. Unconditionally returns TRUE.')
  );
}

/**
 * Simple wrapper on _privatemsg_services_get, which requires discrete args
 *
 * @param $data
 * @return \stdClass[]
 */
function ws_privatemsg_services_get($data) {

  // Return messages.
  return _privatemsg_services_get(@$data['type'], @$data['offset'], @$data['limit']);
}

/**
 * Wrap privatemsg_thread_change_status; just needs a return value
 *
 * @param $thread_id
 * @param $status
 * @return bool
 */
function ws_privatemsg_service_change_thread_status($thread_id, $status = PRIVATEMSG_READ) {

  privatemsg_thread_change_status($thread_id, $status);
  return TRUE;
}
