<?php

/**
 * @file
 * WS-specific services.
 */

/**
 * Implements hook_services_resources() to describe resources provided here
 */
function ws_services_services_resources() {
  $resources = array(
    'hosts' => array(
      'actions' => array(
        'by_location' => array(
          'callback' => '_ws_services_hosts_by_location',
          'args' => array(
            array(
              'name' => 'minlat',
              'type' => 'float',
              'description' => t('Minimum latitude'),
              'source' => 'data',
            ),
            array(
              'name' => 'maxlat',
              'type' => 'float',
              'description' => t('Maximum latitude.'),
              'source' => 'data',
            ),
            array(
              'name' => 'minlon',
              'type' => 'float',
              'description' => t('Minimum longitude'),
              'source' => 'data',
            ),
            array(
              'name' => 'maxlon',
              'type' => 'float',
              'description' => t('Maximum longitude.'),
              'source' => 'data',
            ),
            array(
              'name' => 'centerlat',
              'type' => 'float',
              'description' => t('Center longitude'),
              'source' => 'data',
            ),
            array(
              'name' => 'centerlon',
              'type' => 'float',
              'description' => t('Center longitude.'),
              'source' => 'data',
            ),
            array(
              'name' => 'limit',
              'type' => 'int',
              'description' => t('Max number of items to return.'),
              'source' => 'data',
              'optional' => TRUE,
              'default value' => 200,
            ),
          ),
          'return' => 'array',
          'help' => t('Returns array of members within the specified coordinates.'),
          'access arguments' => array('access user profiles'),
        ),
        'by_keyword' => array(
          'callback' => '_ws_services_hosts_by_keyword',
          'args' => array(
            array(
              'name' => 'keyword',
              'type' => 'string',
              'description' => t('Keyword'),
              'source' => 'data',
            ),
            array(
              'name' => 'offset',
              'type' => 'int',
              'description' => t("Starting offset within results"),
              'source' => 'data',
            ),
            array(
              'name' => 'limit',
              'type' => 'int',
              'description' => t('Max number of results to return.'),
              'source' => 'data',
            ),
          ),
          'return' => 'array',
          'help' => t('Returns array of members matching keyword.'),
          'access arguments' => array('access user profiles'),
        ),
      ),
    ),
  );
  return $resources;
}


/**
 * Utility function to provide search by location service
 *
 * @param $data
 *   - Array with minlat, maxlat, minlon, maxlon bounding area
 *
 * @return array
 *   - Array of hosts within the bounding area
 */
function _ws_services_hosts_by_location($data) {
  $hosts = wsmap_get_hosts_by_location($data['minlat'], $data['maxlat'], $data['minlon'], $data['maxlon'], $data['centerlat'], $data['centerlon'], $data['limit']);
  foreach ($hosts['accounts'] as &$account) {
    $uri = "";
    if (!empty($account->picture)) {
      $file = file_load($account->picture);
      $uri = $file->uri;
    }

    foreach (_ws_services_profile_pictures($uri) as $key => $value) {
      $account->$key = $value;
    }
  }
  return $hosts;
}

/**
 * Search hosts by keyword, which can be town, fullname, email, username
 *
 * @param $data
 *   Array of args including:
 *    - keyword
 *    - offset within search results
 *    - limit (max number to return)
 *
 * @return
 *   Array of user accounts
 */
function _ws_services_hosts_by_keyword($data) {
  $keyword = trim($data['keyword']);
  $offset = !empty($data['offset']) ? $data['offset'] : 0;
  $limit = !empty($data['limit']) ? $data['limit'] : variable_get('ws_services_keyword_results_limit', 50);

  try {
    $query = db_select('users', 'u');
    $query->join('wsuser', 'w', 'u.uid = w.uid');
    $query->join('user_location', 'ul', 'u.uid = ul.oid');
    $query->fields('u', array('uid'));

    $query->condition('u.status', 1)
      ->condition(db_or()
        ->condition('u.name', db_like($keyword) . '%', 'LIKE')
        ->condition('w.fullname', '%' . db_like($keyword) . '%', 'LIKE')
        ->condition('ul.city', db_like($keyword) . '%', 'LIKE')
        ->condition('u.mail', $keyword));

    // Don't show unvalidated users
    $query->where('u.uid NOT IN (SELECT uid FROM {users_roles} WHERE rid = :rid)', array(':rid' => 9));
    $query->orderBy('w.notcurrentlyavailable');

    // Get array of users matching- array of uid => distance
    $uids = $query
      ->range($offset, $limit)
      ->execute()
      ->fetchCol();

  } catch (Exception $e) {
    watchdog_exception('ws_services', $e);
  }

  $accounts = user_load_multiple($uids);
  foreach ($accounts as &$account) {
    unset($account->pass, $account->mail, $account->data, $account->init, $account->roles, $account->contact, $account->tinymce_status);
    if (!empty($account->picture->uri)) {
      foreach (_ws_services_profile_pictures($account->picture->uri) as $key => $value) {
        $account->$key = $value;
      }
    }
  }
  return array(
    'status' => array(
      'delivered' => count($accounts),
      'status' => 'complete',
    ),
    'query_data' => array(
      'sql' => $query,
      'keyword' => $keyword,
      'offset' => $offset,
      'limit' => $limit,
    ),
    'accounts' => $accounts,
  );

  return $accounts;
}

/**
 * Provide a full set of profile picture possiblities for API users
 *
 * @param $picture_path (from user object)
 * @return array
 */
function _ws_services_profile_pictures($picture_path) {
  $profile_presets = variable_get('wsuser_profile_image_presets', array('mobile_profile_photo_std', 'profile_picture', 'mobile_photo_456', 'map_infoWindow'));
  $pictures = array();
  if (empty($picture_path)) {
    $picture_path = variable_get('user_picture_default');
  }
  foreach ($profile_presets as $preset) {
    $uri = image_style_path($preset, $picture_path);
    // Unfortunately, image_style_url() actually forces generation of the derivative,
    // but it's the only place where the token is added. So we steal this from
    // image_style_url() to create a proper image link.
    $token_query = array(IMAGE_DERIVATIVE_TOKEN => image_style_path_token($preset, $picture_path));
    $file_url = file_create_url($uri);
    $file_url .= (strpos($file_url, '?') !== FALSE ? '&' : '?') . drupal_http_build_query($token_query);
    $pictures["profile_image_{$preset}"] = $file_url;
  }
  return $pictures;
}
/**
 * Remove inappropriate info from user object retrieved by services.
 *
 * @param $account
 */
function ws_services_services_account_object_alter(&$account) {
  unset($account->mail, $account->signature, $account->data, $account->roles, $account->contact, $account->tinymce_status, $account->howdidyouhear, $account->geoip_location, $account->uc_stripe_customer_id);

  foreach (_ws_services_profile_pictures($account->picture->uri) as $key => $value) {
    $account->$key = $value;
  }
}


/**
 * Implements hook_services_request_preprocess_alter()
 *
 * Attempts to capture a D6-style feedback creation POST and convert the members
 * to D7-style.
 *
 * @param $controller
 * @param $args
 * @param $options
 */
function ws_services_services_request_preprocess_alter($controller, &$args, $options) {

  // If this is a D6-style node creation, munch to the D7 style
  if ($options['resource'] == 'node' && !empty($args[0]['node']['type']) && $args[0]['node']['type'] == "trust_referral") {
    $args[0]['type'] = "trust_referral";
    // was node[field_member_i_trust][0][uid][uid], now field_member_i_trust[und][0][uid]
    $args[0]['field_member_i_trust']['und'][0]['uid'] = $args[0]['node']['field_member_i_trust'][0]['uid']['uid'];
    // was node[body], now body[und][0][value]
    $args[0]['body']['und'][0]['value'] = $args[0]['node']['body'];
    // was node[field_guest_or_host][value], now field_guest_or_host[und]
    $args[0]['field_guest_or_host']['und'] = $args[0]['node']['field_guest_or_host']['value'];
    // was node[field_hosting_date][0][value][year] now field_hosting_date[und][0][value][year]
    $args[0]['field_hosting_date']['und'][0]['value']['year'] = $args[0]['node']['field_hosting_date'][0]['value']['year'];
    // was node[field_hosting_date][0][value][month] now field_hosting_date[und][0][value][month]
    $args[0]['field_hosting_date']['und'][0]['value']['month'] = $args[0]['node']['field_hosting_date'][0]['value']['month'];
    // Day of month is now required, but provide 15 as a filler
    $args[0]['field_hosting_date']['und'][0]['value']['day'] = "15";
    // Was node[field_rating][value], now field_rating[und]
    $args[0]['field_rating']['und'] = $args[0]['node']['field_rating']['value'];

    unset ($args[0]['node']);

  }
}
