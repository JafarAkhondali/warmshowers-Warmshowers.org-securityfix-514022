<?php

/**
 * @file
 *  Handle Mandrill incoming webhooks.
 */

define(MANDRILL_INCOMING_HANDLED, 1);
define(MANDRILL_INCOMING_UNHANDLED, 0);
define(MANDRILL_INCOMING_ERROR, -1);

/**
 * Implements hook_menu() to provide an administrative menu().
 *
 * @return mixed
 */
function mandrill_incoming_menu() {
  $items['admin/config/services/mandrill_incoming'] = array(
    'title' => 'Mandrill Incoming',
    'description' => 'Incoming email via Mandrill',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mandrill_incoming_admin_settings_form'),
    'access arguments' => array('administer services'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 20,
  );
  return $items;
}

/**
 * Implements hook_services_resources().
 */
function mandrill_incoming_services_resources() {
  $message_receive = array(
    'callback' => 'mandrill_incoming_event',
    'access callback' => 'mandrill_incoming_access_callback',
    'args' => array(
      array(
        'name' => 'mandrill_events',
        'source' => 'data',
        'description' => 'Incoming event data',
        'type' => 'array',
      ),
    ),
    'return' => 'bool',
    'help' => t('Returns TRUE if the message sending was a success.'),
  );

  $head = array(
    'callback' => 'mandrill_incoming_event',
    'access callback' => 'mandrill_incoming_access_callback',
    'return' => 'bool',
    'help' => t('Unconditionally returns TRUE.'),
    'debug' => TRUE,
  );

  $resources = array(
    '#api_version' => 3001,
    'mandrill_events' => array(
      'operations' => array(
        'index' => $head,
        'create' => $message_receive,
      ),
    ),
  );
  return $resources;

}

/**
 * Form providing admin menu options
 *
 * @return mixed
 */
function mandrill_incoming_admin_settings_form($form, &$form_state) {
  $form['mandrill_incoming_canonical_url'] = array(
    '#type' => 'textfield',
    '#title' => t('Mandrill incoming webhook URL'),
    '#description' => t("Must be exactly the same as the webhook URL you provided to Mandrill"),
    '#default_value' => variable_get('mandrill_incoming_canonical_url', ''),
  );

  $form['mandrill_incoming_webhook_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Mandrill incoming webhook key'),
    '#description' => t("Key provided by Mandrill to validate webhook"),
    '#default_value' => variable_get('mandrill_incoming_webhook_key', ''),
  );

  $form['mandrill_incoming_failure_forward_email'] = array(
    '#type' => 'textfield',
    '#title' => t('Email address to which to forward unhandled emails'),
    '#description' => t('If this is not empty, any emails which do not get successfully handled by hook_mandrill_incoming_event() will be forwarded to this email address'),
    '#default_value' => variable_get('mandrill_incoming_failure_forward_email', ''),
  );
  $form =  system_settings_form($form);
  return $form;
}

/**
 * Generates a base64-encoded signature for a Mandrill webhook request.
 * Verbatim from http://help.mandrill.com/entries/23704122-Authenticating-webhook-requests
 *
 * @param string $webhook_key the webhook's authentication key
 * @param string $url the webhook url
 * @param array $params the request's POST parameters
 */
function mandrill_incoming_generate_signature($webhook_key, $url, $params) {
  $signed_data = $url;
  ksort($params);
  foreach ($params as $key => $value) {
    $signed_data .= $key;
    $signed_data .= $value;
  }

  return base64_encode(hash_hmac('sha1', $signed_data, $webhook_key, TRUE));
}

/**
 * Process the incoming item. The events array is described at
 * http://help.mandrill.com/entries/22092308-What-is-the-format-of-inbound-email-webhooks-
 *
 * @param $events
 * @return array
 */
function mandrill_incoming_event($events) {

  // The official URL at which we are to receive events. Please try to have
  // only one!
  $canonical_url = variable_get('mandrill_incoming_canonical_url', 'https://www.warmshowers.org/services/rest/mandrill_events');

  // Mandrill webhook key corresponding to canonical URL
  $key = variable_get('mandrill_incoming_webhook_key', '');

  // This is the simple HEAD access request that mandrill uses to check to
  // see if anybody is home.
  if (empty($events)) {
    return array('success');
  }

  $calculated_signature = mandrill_incoming_generate_signature($key, $canonical_url, $_POST);
  $received_signature = $_SERVER['HTTP_X_MANDRILL_SIGNATURE'];

  if ($received_signature != $calculated_signature) {
    watchdog('mandrill_incoming', 'Failed mandrill signature validation, probable message truncation, calculated="%calculated", received="%received", md5(mandrill_events)="%md5", strlen(mandrill_events)=%length, url="%url", webhook_key="%webhook_key", post=<pre>@post</pre>', array(
      '%calculated' => $calculated_signature,
      '%received' => $received_signature,
      '%length' => strlen($_POST['mandrill_events']),
      '%md5' => md5($_POST['mandrill_events']),
      '%url' => $canonical_url,
      '%webhook_key' => $key,
      '@post' => print_r($_POST, TRUE),
    ), WATCHDOG_ERROR);
  }

  $events = json_decode($events['mandrill_events']);
  watchdog('mandrill_incoming', 'Incoming events=<pre>@events</pre>', array('@events' => print_r($events, TRUE)));

  foreach ($events as $event) {

    // Each hook implementation receives $event (as described at http://help.mandrill.com/entries/22092308-What-is-the-format-of-inbound-email-webhooks-)
    // and must return
    // - MANDRILL_INCOMING_HANDLED if it handled the message successfully
    // - MANDRILL_INCOMING_UNHANDLED if no error but not handled
    // - array(MANDRILL_INCOMING_ERROR => $failure_description) if an error occurred processing the message.
    $results = module_invoke_all('mandrill_incoming_event', $event);

    // If no module handled this event, resend the email to an admin.
    if (!in_array(MANDRILL_INCOMING_HANDLED, $results)) {
      watchdog('mandrill_incoming', 'Failed to handle incoming email (to=%to, subject=%subject)', array('%to' => print_r($event->msg->to, TRUE), '%subject' => $event->msg->subject), WATCHDOG_WARNING);

      $failure_description = "";
      foreach ($results as $item) {
        if (is_array($item) && !empty($item[MANDRILL_INCOMING_ERROR])) {
          $failure_description .= $item[MANDRILL_INCOMING_ERROR] . ", ";
        }
      }

      // If a forwarding email is configured for this failure, send it on.
      $failure_forward_email = variable_get('mandrill_incoming_failure_forward_email', '');
      if (!empty($failure_forward_email)) {
        $message = array(
          'id' => 'mandrill_incoming_failure',
          'from' => $event->msg->from_email,
          'to' => $failure_forward_email,
          'subject' => "[MANDRILL FAILED: $failure_description]" . preg_replace('/\[mid[:.].*\]/', '', $event->msg->subject),
          'body' => t('MANDRILL FAILED TO HANDLE: @failure_description', array('@failure_description' => $failure_description)) . "\r\nOriginal Subject:" . $event->msg->subject . "\r\n\r\n" . $event->msg->text . "\r\n\r\n------\r\n" . $event->msg->raw_msg,
          headers => array(
            'from' => $event->msg->from_email,
          ),
        );
        $result = drupal_mail_send($message);

        if (!$result) {
          watchdog('mandrill_incoming', 'Failed to drupal_mail_send mandrill_incoming bail message', WATCHDOG_ERROR);
        }
      }
    }
    else {
      variable_set('mandrill_incoming_last_success_timestamp', REQUEST_TIME);
    }
  }

  // Return to Mandrill indicating we handled it...
  return array('success');
}

/**
 * Simple access callback required by the service definition
 *
 * @return bool
 */
function mandrill_incoming_access_callback() {
  return TRUE;
}

/**
 * Implements hook_mandrill_incoming_event().
 *
 * $event format is described at http://help.mandrill.com/entries/22092308-What-is-the-format-of-inbound-email-webhooks-
 *
 * Dummy hook that just logs. Demonstrates hook_mandrill_incoming_event()
 *
 * @param $event
 * @return int
 *   MANDRILL_INCOMING_HANDLED
 *   MANDRILL_INCOMING_UNHANDLED
 *   MANDRILL_INCOMING_ERROR
 */
function mandrill_incoming_mandrill_incoming_event($event) {
  $msg = $event->msg;
  // watchdog('mandrill_incoming', 'Received "inbound" from=%from to=%to subject=%subject', array('%from' => print_r($msg->from_email, TRUE), '%to' => print_r($msg->to, TRUE), '%subject' => $msg->subject));
  return MANDRILL_INCOMING_UNHANDLED;
}
