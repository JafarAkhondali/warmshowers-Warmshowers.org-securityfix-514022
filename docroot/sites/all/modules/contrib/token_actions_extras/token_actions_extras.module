<?php
/**
 * @file
 * token_actions_extras.module
 *
 * This module provides more advanced token actions.
 *
 */


/**
 * Implements hook_menu().
 */
function token_actions_extras_menu() {
  $items = array();

  $items['admin/settings/token_actions_extras'] = array(
    'title' => 'Token Actions Extras',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('token_actions_extras_settings_form'),
    'access arguments' => array('administer site'),
  );
  return $items;
}

/**
 * Implements hook_action_info() to provide additional token actions
 */
function token_actions_extras_action_info() {
  return array(
    'token_actions_extras_send_email_action' => array(
      'description' => t('Send enhanced tokenized e-mail'),
      'type' => 'system',
      'configurable' => TRUE,
      'hooks' => array(
        'nodeapi' => array('view', 'insert', 'update', 'delete'),
        'comment' => array('view', 'insert', 'update', 'delete'),
        'user' => array('view', 'insert', 'update', 'delete', 'login'),
        'taxonomy' => array('insert', 'update', 'delete'),
      )
    ),
  );
}

/**
 * System settings form for the module
 *
 * @return mixed
 */
function token_actions_extras_settings_form() {

  $form = array();

  $form['tokenized_email'] = array(
    '#type' => 'fieldset',
    '#title' => t('Tokenized Email'),
    '#collapsed' => FALSE,
  );

  $form['tokenized_email']['token_actions_extras_default_sender_email'] = array(
    '#type' => 'textfield',
    '#title' => t('Default sender email address'),
    '#default_value' => variable_get('token_actions_extras_default_sender_email', ''),
    '#size' => 20,
  );
  $form['tokenized_email']['token_actions_extras_default_sender_friendly_name'] = array(
    '#type' => 'textfield',
    '#title' => t('Default sender friendly name'),
    '#default_value' => variable_get('token_actions_extras_default_sender_friendly_name', variable_get('site_name', '')),
    '#size' => 20,
    '#description' => t('The friendly name for the from address. For example, if the sender is me@example.com and the friendly name is "Example Admin" the From: will then be "Example Admin" <me@example.com>.'),
  );
  $form['tokenized_email']['token_actions_extras_default_replyto'] = array(
    '#type' => 'textfield',
    '#title' => t('Default reply-to address'),
    '#default_value' => variable_get('token_actions_extras_default_replyto', ''),
    '#size' => 20,
  );
  $form['tokenized_email']['token_actions_extras_default_recipient_email'] = array(
    '#type' => 'textfield',
    '#title' => t('Default target recipient address'),
    '#default_value' => variable_get('token_actions_extras_default_recipient_email', '[mail]'),
    '#size' => 20,
  );
  return system_settings_form($form);

}
/**
 * Action callback to send a tokenized e-mail.
 *
 * This is all a copy of what's in token_actions module but here adds
 *   * Sender
 *   * Friendly name
 *   * Reply-To
 *
 * @see token_actions_extras_send_email_action_form()
 * @see token_actions_extras_send_email_action_submit()
 */
function token_actions_extras_send_email_action($object, $context) {
  token_normalize_context($context);
  $params['sender'] = token_replace_multiple($context['sender'], $context);
  $params['sender_friendly'] = token_replace_multiple($context['sender_friendly'], $context);
  $params['replyto'] = token_replace_multiple($context['replyto'], $context);
  $recipient = token_replace_multiple($context['recipient'], $context);
  $params['subject'] = str_replace(array(
    "\r",
    "\n"
  ), '', token_replace_multiple($context['subject'], $context));
  $params['body'] = token_replace_multiple($context['message'], $context);

  if (drupal_mail('token_actions_extras', 'send_email', $recipient, language_default(), $params, $params['sender'])) {
    watchdog('action', 'Sent tokenized email to %recipient', array('%recipient' => $recipient));
  }
  else {
    watchdog('error', 'Unable to send email to %recipient', array('%recipient' => $recipient));
  }
}

/**
 * Form builder; Prepare a form for a tokenized e-mail action.
 *
 * @see token_actions_extras_send_email_action()
 * @see token_actions_extras_send_email_action_validate()
 * @see token_actions_extras_send_email_action_submit()
 */
function token_actions_extras_send_email_action_form($context) {
// Set default values for form.
  $context += array(
    'sender' => '',
    'sender_friendly' => '',
    'replyto' => '',
    'recipient' => '',
    'subject' => '',
    'message' => '',
  );

  $form['sender'] = array(
    '#type' => 'textfield',
    '#title' => t('Sender'),
    '#default_value' => !empty($context['sender']) ? $context['sender'] : variable_get('token_actions_extras_default_sender_email', ''),
    '#required' => TRUE,
    '#size' => '20',
    '#maxlength' => '254',
    '#description' => t('The email address FROM which the message should be sent.'),
    '#element_validate' => array('token_element_validate'),
    '#token_types' => array('all'),
  );

  $form['sender_friendly'] = array(
    '#type' => 'textfield',
    '#title' => t('Sender Friendly Name'),
    '#default_value' => !empty($context['sender_friendly']) ? $context['sender_friendly'] : variable_get('token_actions_extras_default_sender_friendly_name', 'Warmshowers.org'),
    '#required' => TRUE,
    '#size' => '20',
    '#maxlength' => '254',
    '#description' => t('The friendly display name of sender.'),
    '#element_validate' => array('token_element_validate'),
    '#token_types' => array('all'),
  );


  $form['replyto'] = array(
    '#type' => 'textfield',
    '#title' => t('Reply-to'),
    '#default_value' => $context['replyto'],
    '#default_value' => !empty($context['sender_friendly']) ? $context['sender_friendly'] : variable_get('token_actions_extras_default_replyto', ''),
    '#size' => '20',
    '#maxlength' => '254',
    '#description' => t('The reply-to email address.'),
    '#element_validate' => array('token_element_validate'),
    '#token_types' => array('all'),
  );

  $form['recipient'] = array(
    '#type' => 'textfield',
    '#title' => t('Recipient'),
    '#default_value' => !empty($context['recipient']) ? $context['recipient'] : variable_get('token_actions_extras_default_recipient_email', '[mail]'),
    '#required' => TRUE,
    '#size' => '20',
    '#maxlength' => '254',
    '#description' => t('The email address to which the message should be sent.'),
    '#element_validate' => array('token_element_validate'),
    '#token_types' => array('all'),
  );
  $form['subject'] = array(
    '#type' => 'textfield',
    '#title' => t('Subject'),
    '#default_value' => $context['subject'],
    '#size' => '20',
    '#maxlength' => '254',
    '#description' => t('The subject of the message.'),
    '#element_validate' => array('token_element_validate'),
    '#token_types' => array('all'),
  );
  $form['message'] = array(
    '#type' => 'textarea',
    '#title' => t('Message'),
    '#default_value' => $context['message'],
    '#required' => TRUE,
    '#cols' => '80',
    '#rows' => '20',
    '#description' => t('The message that should be sent.'),
    '#element_validate' => array('token_element_validate'),
    '#token_types' => array('all'),
  );

  $form['help'] = array(
    '#type' => 'fieldset',
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#title' => t('Placeholder tokens'),
    '#description' => t("The following placeholder tokens can be used in to generate the URL path. Some tokens may not be available, depending on the context in which the action is triggered."),
  );
  $form['help']['tokens'] = array(
    '#value' => theme('token_tree', 'all'),
  );

  return $form;
}

/**
 * Validate token_actions_extras_send_email_action form submissions.
 *
 * @see token_actions_extras_send_email_action()
 * @see token_actions_extras_send_email_action_form()
 * @see token_actions_extras_send_email_action_submit()
 */
function token_actions_extras_send_email_action_validate($form, $form_state) {
  $form_values = $form_state['values'];
  if (!empty($form_values['replyto']) && !valid_email_address($form_values['replyto'])) {
    form_set_error('replyto', t('Enter a valid email address or use a token e-mail address such as %mail.', array('%mail' => '[mail]')));
  }
  foreach (array('sender', 'recipient') as $form_item) {
    if (!valid_email_address($form_values[$form_item]) && strpos($form_values[$form_item], 'mail') === FALSE) {
// We want the literal %mail placeholder to be emphasized in the error message.
      form_set_error($form_item, t('Enter a valid email address or use a token e-mail address such as %mail.', array('%mail' => '[mail]')));
    }
  }
}

/**
 * Process token_actions_extras_send_email_action form submissions.
 *
 * @see token_actions_extras_send_email_action()
 * @see token_actions_extras_send_email_action_form()
 * @see token_actions_extras_send_email_action_validate()
 */
function token_actions_extras_send_email_action_submit($form, $form_state) {
  return array(
    'sender' => $form_state['values']['sender'],
    'sender_friendly' => $form_state['values']['sender_friendly'],
    'recipient' => $form_state['values']['recipient'],
    'replyto' => $form_state['values']['replyto'],
    'subject' => $form_state['values']['subject'],
    'message' => $form_state['values']['message'],
  );
}

/**
 * Implements hook_mail().
 */
function token_actions_extras_mail($key, &$message, $params) {

  $messages['headers']['From'] = $params['sender'];
  if (!empty($params['sender_friendly'])) {
    $message['headers']['From'] = '"'
      . str_replace('"', '', $params['sender_friendly'])
      . '" <' . $params['sender'] . '>';
  }

  if (!empty($params['replyto'])) {
    $message['headers']['Reply-To'] = $params['replyto'];
  }
  $message['subject'] = $params['subject'];
  $message['body'][] = $params['body'];
}
