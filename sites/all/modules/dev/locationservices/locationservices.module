<?php

// $Id: locationservices.module 505 2009-05-24 18:55:09Z rfay $
/**
 * @file
 * Administrative helpers for warmshowers.org - mostly reports
 *
 */

function locationservices_perm() {
  return array(
	'view administrative reports',
  );
}

/**
 * Implementation of hook_menu().
 */
function locationservices_menu() {
  $items = array();

  $items['location_country_locator_service'] = array(
			'title' => "Get lat/lon from countrycode",
			'page callback' => 'location_country_locator_service',
			'access arguments' => array('access content'),  // TODO: Revisit this perm
			'type' => MENU_CALLBACK,

  );

  $items['location_autocomplete'] = array(
			'title' => "Location Autocomplete backend function",
			'page callback' => 'location_autocomplete',
			'access arguments' => array('access content'),  // TODO: Revisit this perm
			'type' => MENU_CALLBACK,

  );



  return $items;
}

function location_country_position_from_country($country) {
  // This query uses user_location_countries to get the centers of the countries
  $result = db_query("SELECT l.country country_code, l.description country, latitude, longitude, area
  	FROM {user_location_countries} l, {geonames_countryinfo} g
  	WHERE l.country='%s' and l.country = iso_alpha2",
  $country);

  // This one uses the country capital from the geonames db
  // 	$result = db_query("select i.name country, latitude, longitude, area
  // 				from {geonames} g, {geonames_countryinfo} i
  // 				where country_code='%s' and feature_code='pplc'
  // 				and country_code=iso_alpha2", $country);

  $item = db_fetch_object($result);
  if (!$item) { return null; }
  $item->defaultzoom = min(round(12-log($item->area/1000,4)), 8);

  // A few countries are huge and really need some help with the zoom.
  $zoom_overrides = variable_get('locationservices_zoom_overrides', array(
    'us' => 6,
    'ca' => 5,
    'ru' => 3,
    'cn' => 4,
  ));

  if (!empty($zoom_overrides[$item->country_code])) {
    $item->defaultzoom = $zoom_overrides[$item->country_code];
  }

  return $item;
}

function location_country_locator_service($country) {
  $res = location_country_position_from_country($country);
  print drupal_to_js($res);
  exit();
}



/**
 * Used by the autocomplete on the main map page to look up city locations
 * for a given country. Searches for matches in declining order of population
 * @param $country_code
 * 	ISO country code
 * @param $string
 * 	The partial name of the city
 * @return unknown_type
 */
function location_autocomplete($country_code, $string) {
  $limit = 15;  // Max items we'll return
  $cities = array();
  $result=null;

  $result = db_query_range(
  	"SELECT distinct g.name cityname, a.name provname, g.country_code,
  		latitude, longitude, g.admin1_code, g.feature_code
  	FROM {geonames} g,{geonames_adm1} a
  	WHERE g.country_code='%s'
  		and g.ansiname like('%s%%') and feature_code in ('ppl', 'ppla', 'pplc', 'adm1')
  		and g.country_code = a.country_code and g.admin1_code=a.adm1_code
  		and (population > 1000 or feature_code='adm1')
  		order by (feature_code='adm1') desc, g.population desc", $country_code, $string, 0, $limit);

  while ($city = db_fetch_array($result)) {

    if ($city['feature_code'] == 'ADM1') {  // Treat state capital as center of a state
      $place = $city['provname'] . " (state/province)";
    } else {
      $place =  $city['cityname'] . ", " . $city['provname'] ;
    }
    $latlon = $city['latitude'] . "|" . $city['longitude'];

    // In D6 we need all the data in the value part, so make it 3 parts: Name|Lat|Lon
    $cities[$place . "|" . $latlon] = $place;
  }
  print drupal_to_js($cities);
  exit();
}



function user_location_get_browser_country() {

  $ip = ip_address();
  // Allow testing of this in dev environment
//  if ($ip == '127.0.0.1') {
//    static $debug_browser_ip;
//    if (!$debug_browser_ip) {
//      $test_ips = array(
//        'us' => '76.227.18.25',
//        'fi' => '62.236.106.181',
//        'uk' => '212.100.232.194',
//        'nl' => '212.61.151.243',
//        'cn' => '58.14.0.1',
//      );
//      $key = array_rand($test_ips);
//      $debug_browser_ip = $test_ips[$key];
//      drupal_set_message("Debug: Using browser country $key, bogus IP=$debug_browser_ip");
//    }
//    $ip = $debug_browser_ip;
//  }
  if (function_exists('ip2cc_get_country')) {
    if ($cc = ip2cc_get_country($ip)) {
      return strtolower($cc->country_code);
    } else {
      return null;
    }
  }
}

function location_get_browser_location() {
  if ($mycountry = user_location_get_browser_country()) {
    return location_country_position_from_country($mycountry);
  }
  return null;
}


/**
 * Return array of supported countries (ISOCOde=>countryname)
 *
 * @return array of countries
 */
function _user_location_supported_countries() {
  static $supported_countries = array();

  // If this function has already been called this request, we can avoid a DB hit.
  if (!empty($supported_countries)) {
    return $supported_countries;
  }

  // Try first to load from cache, it's much faster than the scan below.
  $cache = cache_get('user_location:supported-countries');
  if (!empty($cache)) {
    $supported_countries = $cache->data;//D6 change from unserialize($cache->data);
  } else {
    // '<ISO two-letter code>' => '<English name for country>'
    $sql = 'select lcase(country) country, description from {user_location_countries} order by description';
    $sqlresult = db_query($sql);
    while ($rec = db_fetch_object($sqlresult)) {
      $supported_countries[$rec->country] = $rec->description;
    }

    if (count($supported_countries)) {
      cache_set('user_location:supported-countries', $supported_countries);
    }
  }

  return $supported_countries;
}

/**
 * Return a list of provinces for the selected country
 *
 * @param unknown_type $country
 * @return unknown
 */
function _user_location_provincelist($country) {
  return _user_location_get_provincecode_to_province_map($country);

}




/**
 * Return array of provinces for given country
 *
 * @param unknown_type $country
 * @return array of provinces (CODE=>Name)
 */
function _user_location_get_provincecode_to_province_map($country="us") {
  $provinces = array();

  $cachename = "user_location:provinces:$country";
  // Try first to load from cache, it's much faster than the scan below.
  $cache = cache_get($cachename);
  if (!empty($cache)) {
    $provinces = $cache->data; //Russo D6 removed unserialized
  } else {
    $sql = 'select lcase(province) province, description from {user_location_provinces} where country = "%s"';
    $sqlresult = db_query($sql, $country);

    while ($rec = db_fetch_object($sqlresult)) {
      $provinces[$rec->province] = $rec->description;
    }

    if (count($provinces)) {
      cache_set($cachename, $provinces);
    }
  }

  return $provinces;


}

