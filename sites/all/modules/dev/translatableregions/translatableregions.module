<?php
// $Id $

/**
 * @file
 * Make it possible to machine-translate any element of a page.
 *
 * Adapted from translatableregions module by Dave Trainer.
 */

/**
 * Implementation of hook_init().
 *
 * Add css and javascript for this project if the user has enabled it.
 */
function translatableregions_init() {
  global $user;
  if (variable_get('translatableregions_always_show_translate_buttons', TRUE) || $user->show_auto_translation) {
    translatableregions_install_js();
  }
}

/**
 * Implementation of hook_menu.
 */
function translatableregions_menu() {
  $items['admin/settings/translatableregions'] = array(
    'title' => "Translatable Regions",
    'access arguments' => array('administer site configuration'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('translatableregions_admin'),
  );
  return $items;
}

/**
 * Implementation of hook_block.
 *
 * Provides a single block that allows the user to turn on translation helps.
 */
function translatableregions_block($op = 'list', $delta = '', $edit = array()) {
  // The $op parameter determines what piece of information is being requested.
  switch ($op) {
    case 'list':
      $blocks['configure-auto-translation'] = array(
        'configure-auto-translation' => t('Configure Auto Translation'),
      );
      return $blocks;
    case 'view':
      switch ($delta) {
        case 'configure-auto-translation':
          global $user;
          if ($user->uid > 0) {
            $block['subject'] = t('Automatic Translation');
            $block['content'] = drupal_get_form('translatableregions_auto_trans_config');
          }
          break;
      }
      return $block;
  }
}

/**
 * The form that provides configuration of translation.
 */
function translatableregions_auto_trans_config(&$form_state) {
  global $user;
  $form['show_auto_translation'] = array(
    '#type' => 'checkbox',
    '#title' => t("Show automatic translation helpers"),
    '#default_value' => $user->show_auto_translation,
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t("Set"),
  );
  return $form;
}


function translatableregions_auto_trans_config_submit($form, &$form_state) {
  global $user;
  user_save($user, array('show_auto_translation' => $form_state['values']['show_auto_translation']));
}


/**
 * Admin configuration form for translatableregions.
 */
function translatableregions_admin(&$form_state) {
  //TODO: Add what *not* to translate.
  //TODO: add translation of the entire page?
  $form['translatableregions_always_show_translate_buttons'] = array(
    '#type' => 'checkbox',
    '#title' => t("Always show translate buttons"),
    '#description' => t("The translate buttons can be opt-in, based on a setting saved with the user (and configured with the block provided with this module). But if this checkbox is selected, it will be shown regardless."),
    '#default_value' => variable_get('translatableregions_always_show_translate_buttons', TRUE),
  );
  $form['translatableregions_translate_selectors'] = array(
    '#type' => 'textfield',
    '#title' => t('CSS Selector for regions to be translated'),
    '#description' => t('Enter a valid css selector for the items to be translated. For example, ".comment .content" would allow translation of comment bodies.'),
    '#default_value' => variable_get('translatableregions_translate_selectors', '.comment .content'),
  );
  $form['translatableregions_auto_translate'] = array(
    '#type' => 'checkbox',
    '#title' => t("Automatically detect user language and translate."),
    '#description' => t("If this is checked, the user language will be determined from the \$language variable or from the browser language, and if it is different from the language in which the section is written, will be translated automatically."),
    '#default_value' => variable_get('translatableregions_auto_translate', FALSE),
  );

  return system_settings_form($form);
}

/**
 * Install all the javascript we need to install.
 *
 * jquery translate does most of the work, but also load settings.
 */
function translatableregions_install_js() {
  $path = drupal_get_path('module', 'translatableregions');
  // TODO: When everything is solid, move to the min version.
  // drupal_add_js("$path/js/jquery.translate-1.3.9.min.js");
  drupal_add_js("$path/js/jquery.translate.js");

  drupal_add_js("$path/translatableregions.js");

  $settings = array(
    'translate_selectors' => variable_get('translatableregions_translate_selectors', '.comment .content'),
    'auto_translate' => variable_get('translatableregions_auto_translate', FALSE),
    'my_language_code' => substr($GLOBALS['language']->language, 0, 2),
    'my_language_name' => $GLOBALS['language']->name,

  );
  drupal_add_js(array('translatableregions' => $settings), "setting");
}

