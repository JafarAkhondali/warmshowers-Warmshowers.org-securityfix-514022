<?php
// $Id: wsmap.module 505 2009-05-24 18:55:09Z rfay $


/**
 * @file
 * Handles the warm showers map.
 */




function wsmap_perm() {
	return array('access map detail', 'access map');
}

/**
 * Implementation of hook_menu().
 */
function wsmap_menu() {

		$items['map'] = array(
		'title' => 'Map',
		'page callback' => 'wsmap_view',
		'access arguments' => array('access map'),
		'type' => MENU_NORMAL_ITEM,
		);
		$items['wsmap_xml_hosts'] = array(
		'title' => 'wsmap_xml_hosts',
		'page callback' => 'wsmap_xml_hosts',
		'access arguments' => array('access map'),
		'type' => MENU_CALLBACK,
		);

	return $items;
}

function user_view_map(){
	return true;
}


/**
 * Implementation of hook_view().
 *
 * This is a typical implementation that simply runs the node text through
 * the output filters.
 */

// @todo: CLEAN UP PHP->HTML->JS (cut out HTML step)
// @todo: Remove unneeded variables, comments, and HTML
// @todo: Put in template or make it nicer to read here
function wsmap_view() {

	$wsmap_path = drupal_get_path('module', 'wsmap');
	drupal_add_js($wsmap_path . '/clusterer/Utils.js');
	drupal_add_js($wsmap_path . '/clusterer/MapUtils.js');
	drupal_add_js($wsmap_path . '/clusterer/OverlayMessage.js');
	drupal_add_js($wsmap_path . '/clusterer/Clusterer2.js');
	drupal_add_js($wsmap_path . '/js//wsmap_clusterer.js');
	drupal_add_js($wsmap_path . '/js/expand_map.js');
  drupal_add_js('misc/autocomplete.js');
  
  if (!($default_location = location_get_browser_location())) {
    $default_location = location_country_position_from_country('ca');  // Have to start them somewhere
  }

  $js_settings = array(
    'mapdata_source' => 'wsmap_xml_hosts',
    'base_path' => base_path() . $wsmap_path,
    'startzoom' => $default_location->defaultzoom,
    'startlat' => round($default_location->latitude),
    'startlon' => round($default_location->longitude),
    'loggedin' => user_access('access map detail'),
  );


  $js_settings = array('wsmap' => $js_settings);
  drupal_add_js($js_settings,'setting');

	drupal_set_html_head('<script src="http://maps.google.com/maps?file=api&v=2&key='.variable_get('user_location_google_key', '').'"  type="text/javascript"></script>');

	$output = "<a id=\"expand_map\" href=\"#\">Expand Map</a>";

	$output .= "
<noscript><b>" . t("This page isn't going to be much use to you until you turn on javascript in your browser. We apologize.") . "</b></noscript>

   <div class='wsmap_instructions'></div>
	<div id='mapframe' style='width:100%;position:relative;clear:both;'>
		<div id='mapholder'>
				<div id='wsmap_map' style='width:100%;height:400px' >
				   <div id='wsmap_debug'> </div>

				</div><!-- end of wsmap_map -->
		</div><!-- end mapholder -->
		    <!-- HACK ALERT - note that style below should have left in it, but it gets removed by some js
		         I hacked this to set the left value in wsmap_clusterer.js.
		     -->
	</div> <!-- mapframe -->";

	if ($showuser = wsmap_get_user_arg()) {
		$userobj = user_load(array('uid'=>$showuser));
		if ($userobj) {
			$output .= '<div id="showuser" style="visible:false" uid="' . $showuser
				. '" latitude="' . $userobj->latitude . '" longitude="' . $userobj->longitude
				. '"country="' . $userobj->country . '"></div>';
		}
	}

  // @todo: This function no longer exists in ip2cc module.  Should we remove or replace with proper function?
  if (function_exists('ipl_country')) {
    $country_code = 'us';
    $longitude = 0;
    $flag ="";
    $country_name=""; $latitude=40;
    if (ipl_country($country_code, $country_name, $latitude, $longitude, $flag)) {
      $output .= "<div id='ipl_latitude' style='display:none'>$latitude</div><div id='ipl_longitude' style='display:none'>$longitude</div>";
    }
	}

	return $output;
}




function wsmap_search_form() {

	$countrylist = array('xx' => t('Select Country...'));
	$countrylist = array_merge($countrylist, user_location_current_countries());


	$form['country'] = array(
	'#title' => t("Country"),
	'#description' => t("Quick jump to country"),

	'#type' => 'select',
	'#options' => $countrylist,

	'#attributes' => array(
		'onChange' => "editCountryOnchange();",

	),
	'#prefix' => "<div class='form-item-div' style='float:left'>",
	'#suffix' => "</div>",

	);
	$form['city'] = array(
	'#title' => t("City/Town/Suburb"),
	'#type' => 'textfield',
	'#size' => 45,
	'#description' => t('Try typing just a few characters and wait'),
	'#autocomplete_path' => 'location_autocomplete',  // Overwritten in js above
	'#attributes' => array(
			'onFocus' => 'this.select(); '
		),
	'#prefix' => "<div id='city-field' class='form-item-div' style='float:left'>",
	'#suffix' => "</div>",

	);

	return $form;

}

function wsmap_get_user_arg() {

		$arg1 = arg(1);
		if (strlen($arg1)) {
			$args = explode("=",$arg1);
		}
		if ($args[0] == "uid" && $args[1] > 0) {
			return 0+$args[1];
		}
		return;
}



/******* xml output for ajax request ************/

function wsmap_xml_hosts() {

	header('Content-Type: text/xml');

	print "<?xml version='1.0' encoding='UTF-8' ?>\n";

	$minlat = (float)$_GET['minlat'];
	$maxlat = (float)$_GET['maxlat'];
	$minlon = (float)$_GET['minlon'];
	$maxlon = (float)$_GET['maxlon'];
	$centerlat = (float)$_GET['centerlat'];
	$centerlon = (float)$_GET['centerlon'];

	$limitlow = 0;
	if (isset($_GET['limitlow'])) {
		$limitlow = (int)$_GET['limitlow'];
	}
	$maxresults = 2000;
	if (isset($_GET['maxresults'])) {
		$maxresults = (int)$_GET['maxresults'];
	}



	if (isset($_GET['count'])) {
		$sql = "select count(*) count from {user_location} l,{wsuser} w,{users} u where u.uid=w.uid and u.uid = l.oid and !w.isunreachable and !w.isstale and latitude > %f and latitude < %f and longitude >%f and longitude <%f  and source <= 6";

		$count = db_result(db_query($sql, $minlat, $maxlat, $minlon, $maxlon));

		print "<count>$count</count>";
		return;
	}


	$totalsql = "select count(*) count from {user_location} l, {wsuser} w, {users} u
	where u.uid=w.uid and u.uid=l.oid and !w.isunreachable and !w.isstale and latitude > %f and latitude < %f and longitude >%f and longitude <%f
	and source <= 6";

	$totalresults=db_result(db_query($totalsql, $minlat, $maxlat, $minlon, $maxlon));


	print "<root>\n";


	$latlonwhere = "latitude > %f and latitude < %f and longitude >%f and longitude <%f ";
	if ($minlon > $maxlon) { // The case on the 180 degrees longitude (New Zealand)
		$latlonwhere = "latitude > %f and latitude < %f and (longitude < %f or longitude > %f)";
	}
	$sql = "SELECT u.uid, mail, w.fullname name, street, city, province, postal_code, country, latitude, longitude,
		 source, notcurrentlyavailable,
		 DEGREES(ACOS(SIN(RADIANS(%f)) * SIN(RADIANS(latitude))+COS(RADIANS(%f)) * COS(RADIANS(latitude))  *
		COS(RADIANS(%f-longitude)))) * 60      as distance
		from {users} u, {user_location} l, {wsuser} w
		 where $latlonwhere
		 and u.uid = l.oid and u.uid=w.uid and u.status>0 and !w.isunreachable and !w.isstale
		 and !notcurrentlyavailable
		order by distance asc";


	$sql .= " limit %d, %d";

	$result = db_query($sql,$centerlat, $centerlat, $centerlon, $minlat,$maxlat,$minlon,$maxlon,$limitlow, $maxresults);


	$status = $totalresults <= $maxresults ? "complete" : "incomplete";


	print "<!-- minlon=$minlon, maxlon=$maxlon, minlat=$minlat, maxlat=$maxlat -->\n";
	print "<!-- Number of items= $delivered -->\n";
	print "<!-- $sql -->\n";
	print '<status id="status" delivered="'.$delivered.'" totalresults="'.$totalresults.'" status="'.$status.'">'. $status;
	print "</status>";
	print "<hosts>\n";

	$count=0;

	while ($row = db_fetch_array($result)) {

		$count++;

		print "<host\n";
		print 'u="'. $row['uid'] . '" ';
		if (user_access('access map detail')) {
			print 'n="'  . xmlentities($row['name']) . '" ';
			print 's="'.xmlentities($row['street']) . '" ';
		}

		print 'c="' .xmlentities($row['city']). '" ';
		print 'p="' .xmlentities($row['province']). '" ';
		print 'z="'.xmlentities($row['postal_code']). '" ';
		print 'cnt="' . xmlentities($row['country']) . '" ';
		print 'la="' . $row['latitude'] . '" ';
		print 'ln="' . $row['longitude']. '" ';
		print 'd="' . $row['distance']. '" ';

		print " />\n";
		// if ($maxresults && $count < $totalresults) { $status="incomplete"; break; }
	}
	print "</hosts>";


	print "</root>";
	exit;
}


function xmlentities($string) {
	return str_replace ( array ( '&', '"', "'", '<', '>', '?' ), array ( '&amp;' , '&quot;', '&apos;' , '&lt;' , '&gt;', '&apos;' ), $string );
}

/*
 * Implementation of hook_block()
 */
function wsmap_block($op = 'list', $delta = 0, $edit = array()){
  if ($op == 'list') {
    $blocks[0] = array(
      'info' => t('Warmshowers Google Map'),
      'weight' => 0,
      'status' => 1,
      'region' => 'content',
    );
  }
  elseif ($op == 'view') {
    $blocks =  array(
      'subject' => t('Warmshowers Google Map'),
      'content' => wsmap_view(),
    );
  }

  return $blocks;
}


